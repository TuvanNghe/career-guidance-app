/* MBTI Result ‚Äì Server Component */
export const dynamic = "force-dynamic";

import { cookies } from "next/headers";
import { redirect } from "next/navigation";
import { createServerComponentClient } from "@supabase/auth-helpers-nextjs";

import { MBTI_MAP } from "@/lib/mbtiDescriptions";  // <-- ƒë∆∞·ªùng tuy·ªát ƒë·ªëi

interface Props { searchParams: { code?: string } }

export default async function MbtiResultPage({ searchParams }: Props) {
  const code = (searchParams.code ?? "").toUpperCase();
  if (!/^[EISNTFJP]{4}$/.test(code)) redirect("/mbti");

  /* 1‚Ää‚Äì‚ÄäAuth */
  const supabase = createServerComponentClient({ cookies });
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) redirect("/login?redirectedFrom=/mbti");

  /* 2‚Ää‚Äì‚Ääl∆∞u k·∫øt qu·∫£ & c·∫≠p nh·∫≠t h·ªì s∆° */
  await supabase.from("mbti_results").upsert({ user_id: user.id, type: code });
  await supabase
    .from("career_profiles")
    .upsert(
      { user_id: user.id, mbti_type: code, updated_at: new Date() },
      { onConflict: "user_id" }
    );

  /* 3‚Ää‚Äì‚Äätin nh·∫Øn chatbot (ƒë√£ c√≥ b·∫£ng chat_messages) */
  await supabase.from("chat_messages").insert({
    user_id: user.id,
    role: "assistant",
    content: `üéâ B·∫°n v·ª´a ho√†n th√†nh MBTI. K·∫øt qu·∫£ l√† **${code}**.`,
  });

  /* 4‚Ää‚Äì‚Äärender m√¥ t·∫£ chi ti·∫øt */
  const desc = MBTI_MAP[code];

  return (
    <div className="mx-auto max-w-3xl py-16 space-y-10 text-center">
      <h1 className="text-4xl font-bold">K·∫øt qu·∫£ MBTI: {code}</h1>

      {/* Intro */}
      <p className="text-lg">{desc?.intro ?? "Kh√¥ng t√¨m th·∫•y m√¥ t·∫£."}</p>

      {/* ƒêi·ªÉm m·∫°nh / ƒêi·ªÉm y·∫øu / Ngh·ªÅ nghi·ªáp g·ª£i √Ω */}
      {desc && (
        <div className="grid gap-6 md:grid-cols-3 text-left">
          <Section title="üí™ Th·∫ø m·∫°nh" items={desc.strengths} />
          <Section title="‚ö†Ô∏è ƒêi·ªÉm y·∫øu"  items={desc.flaws} />
          <Section title="üéØ Ngh·ªÅ ph√π h·ª£p" items={desc.careers} />
        </div>
      )}

      <a
        href="/profile?step=trait"
        className="inline-block rounded bg-blue-600 px-6 py-3 font-medium text-white hover:bg-blue-700"
      >
        Xem H·ªì s∆° Ph√°t tri·ªÉn ngh·ªÅ
      </a>
    </div>
  );
}

/* helper nh·ªè */
function Section({ title, items }: { title: string; items: string[] }) {
  return (
    <div>
      <h2 className="mb-2 font-semibold">{title}</h2>
      <ul className="list-disc list-inside space-y-1">
        {items.map((t) => <li key={t}>{t}</li>)}
      </ul>
    </div>
  );
}
