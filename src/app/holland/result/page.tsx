export const dynamic = "force-dynamic";

import { cookies } from "next/headers";
import { redirect } from "next/navigation";
import { createServerComponentClient } from "@supabase/auth-helpers-nextjs";

interface Props {
  searchParams: { code?: string };
}

/* ‚îÄ‚îÄ Gi·∫£i th√≠ch 6 nh√≥m R-I-A-S-E-C ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const TRAITS: Record<string, string> = {
  R: "Realistic ‚Äì ∆Øa h√†nh ƒë·ªông, thao t√°c v·ªõi v·∫≠t th·ªÉ.",
  I: "Investigative ‚Äì Ph√¢n t√≠ch, kh√°m ph√°, th√≠ch nghi√™n c·ª©u.",
  A: "Artistic ‚Äì S√°ng t·∫°o, tr·ª±c gi√°c, bi·ªÉu ƒë·∫°t √Ω t∆∞·ªüng.",
  S: "Social ‚Äì H·ªó tr·ª£, h·ª£p t√°c, gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c.",
  E: "Enterprising ‚Äì Thuy·∫øt ph·ª•c, l√£nh ƒë·∫°o, kinh doanh.",
  C: "Conventional ‚Äì T·ªâ m·ªâ, d·ªØ li·ªáu, quy tr√¨nh, t·ªï ch·ª©c.",
};

const explain = (code: string) =>
  code
    .split("")
    .map((c) => TRAITS[c] ?? c)
    .join(" | ");

export default async function HollandResultPage({ searchParams }: Props) {
  /* ------------------------------------------------------------------ */
  /* 0. L·∫•y & validate m√£ Holland (3 k√Ω t·ª± R / I / A / S / E / C)      */
  /* ------------------------------------------------------------------ */
  const code = (searchParams.code ?? "").toUpperCase();
  if (!/^[RIASEC]{3}$/.test(code)) redirect("/holland");

  /* ------------------------------------------------------------------ */
  /* 1. Supabase + Auth                                                 */
  /* ------------------------------------------------------------------ */
  const supabase = createServerComponentClient({ cookies });
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user) redirect("/signup");

  /* ------------------------------------------------------------------ */
  /* 2. L∆∞u k·∫øt qu·∫£ v√†o DB                                              */
  /* ------------------------------------------------------------------ */
  /* 2a. Ghi b·∫£ng holland_results (l·ªãch s·ª≠) */
  await supabase.from("holland_results").insert({
    user_id: user.id,
    code,
  });

  /* 2b. Upsert v√†o career_profiles.holland (h·ªì s∆° hi·ªán t·∫°i) */
  await supabase
    .from("career_profiles")
    .upsert(
      { user_id: user.id, holland: { code }, updated_at: new Date() },
      { onConflict: "user_id" }
    );

  /* 2c. G·ª≠i tin nh·∫Øn v√†o chatbot */
  await supabase.from("chat_messages").insert({
    user_id: user.id,
    role: "assistant", // ƒë·ªïi t√™n c·ªôt n·∫øu b·∫°n d√πng kh√°c
    content: `üéâ Ch√∫c m·ª´ng! B·∫°n v·ª´a ho√†n th√†nh tr·∫Øc nghi·ªám Holland. K·∫øt qu·∫£ c·ªßa b·∫°n l√† **${code}**. H√£y h·ªèi t√¥i n·∫øu mu·ªën g·ª£i √Ω ngh·ªÅ nghi·ªáp ph√π h·ª£p nh√©!`,
  });

  /* ------------------------------------------------------------------ */
  /* 3. UI                                                              */
  /* ------------------------------------------------------------------ */
  return (
    <div className="max-w-2xl mx-auto py-20 text-center space-y-8">
      <h1 className="text-3xl font-bold">K·∫øt qu·∫£ Holland: {code}</h1>

      <div className="rounded-lg bg-white p-6 shadow text-left">
        <p>{explain(code)}</p>
      </div>

      <a
        href="/profile?step=trait"
        className="inline-block rounded bg-blue-600 px-6 py-3 font-medium text-white hover:bg-blue-700"
      >
        Xem H·ªì s∆° Ph√°t tri·ªÉn ngh·ªÅ
      </a>
    </div>
  );
}
